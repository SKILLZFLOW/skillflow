enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                  String          @id @default(uuid())
    name                String?
    email               String?         @unique
    pictureUrl          String?         @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation     String?

    fapshiCustomerId    String?

    status              UserStatus      @default(VERIFIED)

    // this is the role of the user for the application
    globalRole          String          @default('USER')
    password            String?         @password @omit
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt @default(now())

    subscriptions       Subscription[]  @relation("user")
    wallets             Wallet[]        @relation("user")
    referralsAsReferrer Referral[]      @relation("referrer")
    referralsAsReferred Referral[]      @relation("referred")
    transactions        Transaction[]   @relation("user")
    socialAccounts      SocialAccount[] @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Subscription {

    id        String   @id @default(uuid())
    planType  String?
    startDate String?
    endDate   String?
    status    String?

    userId    String?
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Course {

    id          String   @id @default(uuid())
    title       String?
    description String?
    previewUrl  String?
    contentUrl  String?
    isPremium   Boolean
    price       String?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Wallet {

    id            String   @id @default(uuid())
    balance       String
    totalEarnings String

    userId        String?
    user          User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Referral {

    id           String        @id @default(uuid())
    commission   String?
    status       String?

    referrerId   String?
    referrer     User?         @relation(fields: [referrerId], references: [id], name: "referrer")
    referredId   String?
    referred     User?         @relation(fields: [referredId], references: [id], name: "referred")

    transactions Transaction[] @relation("referral")
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Transaction {

    id         String    @id @default(uuid())
    amount     String?
    type       String?
    status     String?

    userId     String?
    user       User?     @relation(fields: [userId], references: [id], name: "user")
    referralId String?
    referral   Referral? @relation(fields: [referralId], references: [id], name: "referral")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model SocialAccount {

    id        String   @id @default(uuid())
    platform  String?
    accountId String?
    status    String?

    userId    String?
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

  