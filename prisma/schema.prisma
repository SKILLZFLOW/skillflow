//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                  String          @id() @default(uuid())
  name                String?
  email               String?         @unique()
  pictureUrl          String?         @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation     String?
  status              UserStatus      @default(VERIFIED)
  globalRole          String          @default("USER")
  /// @password
  /// @omit
  password            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt()
  subscriptions       Subscription[]  @relation("user")
  wallets             Wallet[]        @relation("user")
  referralsAsReferrer Referral[]      @relation("referrer")
  referralsAsReferred Referral[]      @relation("referred")
  transactions        Transaction[]   @relation("user")
  socialAccounts      SocialAccount[] @relation("user")
  enrolledCourses     UserCourse[]
}

/// @@allow('all', true)
model Subscription {
  id        String   @id() @default(uuid())
  planType  String?
  startDate String?
  endDate   String?
  status    String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Course {
  id            String       @id() @default(uuid())
  title         String?
  description   String?
  previewUrl    String?
  contentUrl    String?
  isPremium     Boolean
  price         String?
  sections      Section[]
  enrolledUsers UserCourse[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Section {
  id        String   @id() @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

/// @@allow('all', true)
model Video {
  id           String   @id() @default(uuid())
  title        String
  description  String
  embedLink    String
  fileUrl      String?
  documentUrl  String?
  documentType String?
  order        Int
  sectionId    String
  section      Section  @relation(fields: [sectionId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

/// @@allow('all', true)
model Wallet {
  id            String   @id() @default(uuid())
  balance       String
  totalEarnings String
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Referral {
  id           String        @id() @default(uuid())
  commission   String?
  status       String?
  referrerId   String?
  referrer     User?         @relation(fields: [referrerId], references: [id], name: "referrer")
  referredId   String?
  referred     User?         @relation(fields: [referredId], references: [id], name: "referred")
  transactions Transaction[] @relation("referral")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Transaction {
  id         String    @id() @default(uuid())
  amount     String?
  type       String?
  status     String?
  userId     String?
  user       User?     @relation(fields: [userId], references: [id], name: "user")
  referralId String?
  referral   Referral? @relation(fields: [referralId], references: [id], name: "referral")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SocialAccount {
  id        String   @id() @default(uuid())
  platform  String?
  accountId String?
  status    String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SkillFeedVideo {
  id          String   @id() @default(uuid())
  title       String
  description String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserCourse {
  id        String   @id() @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
